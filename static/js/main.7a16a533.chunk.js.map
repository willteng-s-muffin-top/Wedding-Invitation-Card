{"version":3,"sources":["component/Title.js","firebase.js","component/Comment.js","component/CardLists.js","App.js","component/Footer.js","serviceWorker.js","index.js"],"names":["Title","className","Component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Comment","props","state","comments","name","comment","newComment","hideForm","addComment","bind","this","listenForData","collection","orderBy","onSnapshot","querySnapshot","commentsData","forEach","doc","push","data","setState","e","preventDefault","add","timestamp","Date","then","console","log","catch","error","onSubmit","type","placeholder","value","onChange","target","rows","CardLists","containerWidth","React","createRef","current","offsetWidth","i","length","topPos","getRandomPosition","leftPos","zIndex","rotateDef","position","top","left","transform","style","key","ref","min","max","Math","ceil","floor","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7a16a533.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Title.css';\n// import logo from '../assets/images/IMG_2251.JPG';\n\nclass Title extends Component {\n  render(){\n    return (\n      <section className=\"flexbox title-container\">\n          <h2 className=\"flexbox title-container-date\">\n            <span>12</span><span>‚è§</span><span>05</span>\n          </h2>\n          <div>\n              {/* <img className=\"main-img\" src={logo}/> */}\n          </div>\n          <article className=\"line\">\n            <span className=\"text-xl text-bold color-gray\">ÍπÄÌù¨Ï∞Ω</span> Í∑∏Î¶¨Í≥† <span className=\"text-xl text-bold color-gray\">Ïú§Ï†ïÏù∏</span>\n          </article>\n\n          <section className=\"title-container-details\">\n            <div className=\"line\">\n              2020ÎÖÑ 12Ïõî 05Ïùº\n            </div>\n            <div className=\"line\">‚è§</div>\n            <div className=\"line text-bold color-gray\">\n              Cafe Ìè¨ÏóêÌä∏\n            </div>\n          </section>\n      </section>\n    );\n  }\n}\n\nexport default Title;\n","import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  // copy and paste your firebase credential here\n  apiKey: \"AIzaSyBs8-uVq7WHPlcEgXe8TMQJVj7MIwaTCTc\",\n  authDomain: \"wedding-invitation-card-807e4.firebaseapp.com\",\n  databaseURL: \"https://wedding-invitation-card-807e4.firebaseio.com\",\n  projectId: \"wedding-invitation-card-807e4\",\n  storageBucket: \"wedding-invitation-card-807e4.appspot.com\",\n  messagingSenderId: \"956955614275\",\n  appId: \"1:956955614275:web:cc21e805b62d1e02e348f6\",\n  measurementId: \"G-JXENKM28TP\"\n});\n\nconst db = firebaseApp.firestore();\n\nexport { db };\n\n","import React, { Component } from 'react';\nimport { db } from '../firebase';\nimport './Comment.css';\n\nclass Comment extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            comments: [{name: '', comment: ''}],\n            newComment: {name: '', comment: ''},\n            hideForm: false\n        }\n        this.addComment = this.addComment.bind(this);\n    }\n\n    componentDidMount() {\n        this.listenForData();\n    }\n\n    listenForData() {\n        db.collection(\"comments\").orderBy('timestamp', 'desc').onSnapshot((querySnapshot) => {\n            let commentsData = [];\n            querySnapshot.forEach((doc) => {\n                commentsData.push(doc.data());\n            });\n            this.setState({comments: commentsData});\n        });\n    }\n\n    addComment(e) {\n        e.preventDefault();\n        this.setState({comments: [{name: '', comment: ''}], newComment: {name: '', comment: ''}});\n\n        db.collection(\"comments\").add({\n            name: this.state.newComment.name,\n            comment: this.state.newComment.comment,\n            timestamp: new Date()\n        }).then(function() {\n            console.log(\"Comment was successfully added!\");\n        }).catch(function(error) {\n            console.error(\"Error writing error: \", error)\n        });\n\n        this.setState({hideForm: true})\n        this.listenForData();\n    }\n\n    render(){\n        return(\n            <div className=\"comment-container\">\n                <h3 className=\"color-pink\">Ï∂ïÌïò Î©îÏÑ∏ÏßÄ</h3>\n                {!this.state.hideForm ? (\n                    <form className=\"inputbox\" onSubmit={this.addComment}>\n                        <input type=\"text\" placeholder=\"Ïù¥Î¶ÑÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî\" value={this.state.newComment.name} onChange={(e) => {this.setState({newComment: {name:e.target.value, comment:this.state.newComment.comment}})}}/>\n                        <textarea type=\"textarea\" placeholder=\"Î©îÏÑ∏ÏßÄÎ•º Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî\" rows=\"15\" value={this.state.newComment.comment} onChange={(e) => {this.setState({newComment: {name:this.state.newComment.name,comment:e.target.value}})}} />\n                        <button type=\"submit\">ÌôïÏù∏</button>\n                    </form>\n                ) : (\n                    <div className=\"comment-successful\">Í∞êÏÇ¨Ìï©ÎãàÎã§ ^^ <br/> ÏÜåÏ§ëÌïú Î©îÏÑ∏ÏßÄÍ∞Ä Ï†ÑÎã¨ÎêòÏóàÏäµÎãàÎã§ üì¨</div>\n                )} \n            </div>\n        );\n    }\n}\n\nexport default Comment;","import React, { Component } from 'react';\nimport { db } from '../firebase';\nimport './CardLists.css';\n\nclass CardLists extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comments: [{name: '', comment: ''}],\n      containerWidth: 0\n    }\n    this.containerWidth = React.createRef()\n  }\n  componentDidMount() {\n    this.listenForData();\n    console.log(this.containerWidth.current.offsetWidth);\n    this.setState({containerWidth: this.containerWidth.current.offsetWidth - 500})\n\n  }\n\n  listenForData() {\n      db.collection(\"comments\").orderBy('timestamp', 'desc').onSnapshot((querySnapshot) => {\n          let commentsData = [];\n          querySnapshot.forEach((doc) => {\n              commentsData.push(doc.data());\n          });\n          this.setState({comments: commentsData});\n      });\n  }\n  render() {\n    const comments = [];\n\n    for (let i = 0; i < this.state.comments.length; i++) {\n      const topPos = getRandomPosition(0, i/2 * 400);\n      const leftPos = getRandomPosition(0, this.state.containerWidth);\n      const zIndex = getRandomPosition(0, 2147483647);\n      const rotateDef = getRandomPosition(-35, 35);\n\n      const position = {\n        position: 'absolute',\n        top: topPos,\n        left: leftPos,\n        zIndex: zIndex,\n        transform: `rotate(${rotateDef}deg)`,\n      }\n      comments.push(\n        <div \n          // style={{position: 'absolute', top: `${topPos}`, left: `${leftPos}`, zIndex: `${zIndex}`, transform: `rotate(${rotateDef}deg)`}} \n          style={position} \n          key={i} className=\"cardbox\">\n          <h4>{this.state.comments[i].name}</h4>\n          <p>{this.state.comments[i].comment}</p>\n        </div>);\n    };\n    return(\n      <section ref={this.containerWidth}>\n        <h3>Ï∂ïÌïò Î©îÏÑ∏ÏßÄ</h3>\n        <div className=\"card-lists-container\">{comments}</div>  \n      </section>\n    );\n\n    // Private Functions\n    function getRandomPosition(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n  }\n}\n\nexport default CardLists;","import React, {Component} from 'react';\nimport Title from './component/Title';\nimport Comment from './component/Comment';\nimport CardLists from './component/CardLists';\nimport Footer from './component/Footer';\nimport './App.css';\nimport './component/Card.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <main className=\"App\">\n        <section className=\"card-container bg-gray\">\n          <Title/>\n          <Comment/>\n        </section>\n        <CardLists/>\n        {/* <Footer/> */}\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './Footer.css';\n\nclass Footer extends Component {\n  render() {\n    return(\n      <footer>\n        Í∞êÏÇ¨Ìï©ÎãàÎã§\n      </footer>\n    );\n  } \n}\n\nexport default Footer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}